#! /usr/bin/python

from ctypes import *
import socket
import struct


class IP(Structure):
    _fields_ = [
        ("version",          c_ubyte, 4),
        ("ihl",              c_ubyte, 4),
        ("tos",              c_ubyte, 8),
        ("len",              c_ushort,16),
        ("id",               c_ushort,16),
        ("offset",           c_ushort,16),
        ("ttl",              c_ubyte, 8),
        ("protocol_num",     c_ubyte, 8),
        ("sum",              c_ushort,16),
        ("src",              c_uint32,32),
        ("dst",              c_uint32,32)
        ]

    def __new__(self, socket_buffer=None):
        return self.from_buffer_copy(socket_buffer)

    def __init__(self, socket_buffer=None):

        # map protocol constants to their names
        self.protocol_map = {
                1:"ICMP",
                6:"TCP",
                17:"UDP"
                }
        
        # Human Readble form
        #self.id_num      = socket.inet_ntoa(struct.pack("!I",self.id))
        self.src_address = socket.inet_ntoa(struct.pack("@I",self.src))
        self.dst_address = socket.inet_ntoa(struct.pack("@I",self.dst))
        
        self.protocol_x  = socket.inet_ntoa(struct.pack("@I",self.ttl))

        try:
            self.protocol = self.protocol_map[self.protocol_num]
        except:
            self.protocol = int(self.protocol_num)

def main():
    s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(0x0003))
    #s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind(("eth1", 0))
    
    #for off_Set in range(10000):
    #    continue
    sequnce = 1
        
    try:
        while True:
            # Reading Packet
            resp = s.recvfrom(65565)[0]
            byte_size = (len(resp)) 
            # Creating an IP header from the first 20 bytes of the buffer
            ip = IP(resp[14:])
            r = resp[34:] 
            if ip.protocol == "ICMP":
            # Print out protocol and the host
                print("%s bytes from: %s to: %s icmp_sequence: %s ttl: %s %s" % (byte_size, ip.src_address, ip.dst_address, sequnce, ip.ttl, r))
                sequnce += 1
            elif ip.protocol == "TCP" or ip.protocol == "UDP":
            # Print Protocol , IP and Port
                print("from: %s to: %s" % (ip.src_address, ip.dst_address))
                
    except KeyboardInterrupt:
        pass

if __name__ == "__main__":
    #off_Set = offset_Creation()
    main()
